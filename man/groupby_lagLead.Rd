% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/groupby_lagLead.R
\name{groupby_lag}
\alias{groupby_lag}
\alias{groupby_lead}
\title{Helpers for group_by |> mutate(leadOrLag)}
\usage{
groupby_lag(
  .data,
  ...,
  lagCol,
  newCol,
  n = 1L,
  order_by = NULL,
  default = NA,
  doUngroup = TRUE
)

groupby_lead(
  .data,
  ...,
  leadCol,
  newCol,
  n = 1L,
  order_by = NULL,
  default = NA,
  doUngroup = TRUE
)
}
\arguments{
\item{.data}{data.frame/tibble}

\item{...}{group_by fields past to group_by}

\item{lagCol, leadCol}{what column in .data should be lagged or lead}

\item{newCol}{name of column that the mutation creates}

\item{n}{Positive integer of length 1, giving the number of positions to lead or lag by}

\item{order_by}{Override the default ordering to use another vector or column}

\item{default}{Value used for non-existant rows. Defaults to NA.}

\item{doUngroup}{Ungroup the data? TRUE/FALSE. Default TRUE}
}
\value{
tibble
}
\description{
Cuts down on typing to preform relatively common functions.
}
\examples{
\dontrun{

df <- tibble::tribble(
  ~x,  ~y,  ~z,
  'A',  3,  90,
  'B',  3,  150,
  'B',  2,  123,
  'A',  1,  125,
  'C',  1,  111,
  'C',  2,  133,
  'B',  1,  121,
  'A',  2,  108,
  'C',  3,  125
)

groupby_lag(df, x, lagCol = z, newCol = "test", n = 1, order_by = y) \%>\%
  dplyr::arrange(x, y)
groupby_lag(df, x, lagCol = z, newCol = "test", n = 1) \%>\%
  dplyr::arrange(x)
groupby_lead(df, x, leadCol = z, newCol = "test", n = 1, order_by = y) \%>\%
  dplyr::arrange(x, y)
groupby_lead(df, x, leadCol = z, newCol = "test", n = 1) \%>\%
  dplyr::arrange(x)

}

}
