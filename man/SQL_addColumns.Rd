% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SQLhelpers.R
\name{SQL_addColumns}
\alias{SQL_addColumns}
\title{SQL_addColumns}
\usage{
SQL_addColumns(df = NULL, types = NULL, charLength, colNames = NULL, tableName)
}
\arguments{
\item{df}{data.frame/tibble. Optional. Must have df or types specified.}

\item{types}{Character vector of new column types (readr-like). Optional.
Must have df or types specified.}

\item{charLength}{Vector of lengths used for character (NVARCHAR) types. If
using the df argument, it will also accept a named vector of lengths for
each column name with a character type.}

\item{colNames}{Character vector of columns names to include in database
table. Ignored if using the df argument.}

\item{tableName}{Name of database table you want to create.}
}
\value{
A string containing the SQL code to add the columns to the specified
table
}
\description{
Creates raw SQL query to be used to add columns to a table
}
\examples{
\dontrun{
head(iris)
irisdf_addcolumns <- tibble::tibble(test = as.integer(1),
                                    test2 = 'test', test3 = TRUE, test4 = Sys.time())
irisHelper <- tibble::tribble(
  ~name,      ~length,  ~type,
  'test',     NA,       'i',
  'test2',    10,       'c',
  'test3',    NA,       'l',
  'test4',    NA,       'T',
)
SQL_addColumns(df = irisdf_addcolumns, charLength = c("test2" = 10), 
               tableName = "schema.iris")
SQL_addColumns(types = irisHelper[['type']], colNames = irisHelper[['name']],
               charLength = irisHelper[['length']], tableName = "schema.iris")
}

}
